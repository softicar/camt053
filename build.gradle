plugins {
	id 'com.softicar.gradle.java.library' version '4.0.3'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'javax.xml.bind:jaxb-api:2.3.1'
}

sourceCompatibility = "15"
targetCompatibility = "15"

compileJava {
	options.encoding = "UTF-8"
}

compileTestJava {
	options.encoding = "UTF-8"
}

// -------------------- publishing -------------------- //

def PUBLISH_TARGET = findProperty('publish.target')
def PUBLISH_URL = findProperty('publish.url')
def PUBLISH_USERNAME = findProperty('publish.username')
def PUBLISH_PASSWORD = findProperty('publish.password')
def SIGNING_KEY_ID = findProperty('signing.keyId')
def SIGNING_PASSWORD = findProperty('signing.password')
def SIGNING_SECRET_KEY_RING_FILE = findProperty('signing.secretKeyRingFile')

apply plugin: 'maven-publish'
apply plugin: 'signing'

javadoc {
	options.encoding = 'UTF-8'
}
java {
	withJavadocJar()
	withSourcesJar()
}
publishing {
	repositories {
		if(PUBLISH_TARGET == 'remote') {
			maven {
				if(PUBLISH_URL != null) {
					url = PUBLISH_URL
					if(PUBLISH_USERNAME != null) {
						credentials(PasswordCredentials) {
							username PUBLISH_USERNAME
							password PUBLISH_PASSWORD
						}
					}
				}
			}
		} else if(PUBLISH_TARGET == 'local') {
			maven {
				url = System.properties['user.home'] + '/.softicar/maven-local'
			}
		}
	}
	publications {
		mavenJava(MavenPublication) {
			from components.java
			pom {
				name = 'SoftiCAR CAMT.053 Library'
				description = 'A library to read and write CAMT.053 formatted messages.'
				url = 'https://github.com/softicar/camt053'
				developers {
					developer {
						name = 'SoftiCAR'
						email = 'opensource@softicar.com'
						organization = 'SoftiCAR'
						organizationUrl = 'https://github.com/softicar'
					}
				}
				licenses {
					license {
						name = 'MIT License'
						url = 'https://github.com/softicar/platform/blob/main/LICENSE'
					}
				}
				scm {
					connection = 'scm:git:git://github.com/softicar/camt053.git'
					developerConnection = 'scm:git:ssh://github.com:softicar/camt053.git'
					url = 'https://github.com/softicar/camt053/tree/main'
				}
			}
		}
	}
}

signing {
	if(PUBLISH_TARGET == 'remote') {
		sign publishing.publications.mavenJava
	}
}

publish.doFirst {
	if(PUBLISH_TARGET != 'remote' && PUBLISH_TARGET != 'local') {
		throw new GradleException("Please specify the publication target with '-Ppublish.target=[remote|local]'.")
	}
	if(version == "unspecified") {
		throw new GradleException("Please specify the version to publish with '-Pversion=X.Y.Z'.")
	}
}

// This task is created dynamically, upon a valid 'signing' definition.
if(tasks.findByName('signMavenJavaPublication')) {
	signMavenJavaPublication.doFirst {
		if(PUBLISH_TARGET == 'remote') {
			if(SIGNING_KEY_ID == null) {
				throw new GradleException("Please specify the PGP signing key ID with 'signing.keyId' in '~/.gradle/gradle.properties'.")
			}
			if(SIGNING_PASSWORD == null) {
				throw new GradleException("Please specify the PGP secret key password with 'signing.password' in '~/.gradle/gradle.properties'.")
			}
			if(SIGNING_SECRET_KEY_RING_FILE == null) {
				throw new GradleException("Please specify the PGP secret key ring file with 'signing.secretKeyRingFile' in '~/.gradle/gradle.properties'.")
			}
		}
	}
}

// This task is created dynamically, upon a valid 'publishing' definition.
if(tasks.findByName('publishMavenJavaPublicationToMavenRepository')) {
	publishMavenJavaPublicationToMavenRepository.doFirst {
		if(PUBLISH_TARGET != 'remote' && PUBLISH_TARGET != 'local') {
			throw new GradleException("Please specify the publication target with '-Ppublish.target=[remote|local]'.")
		}
		if(version == "unspecified") {
			throw new GradleException("Please specify the version to publish with '-Pversion=X.Y.Z'.")
		}
		if(PUBLISH_TARGET == 'remote') {
			if(PUBLISH_URL == null) {
				throw new GradleException("Please specify the remote publication URL with 'publish.url' in '~/.gradle/gradle.properties'.")
			}
			if(PUBLISH_USERNAME == null) {
				throw new GradleException("Please specify the remote publication username with 'publish.username' in '~/.gradle/gradle.properties'.")
			}
			if(PUBLISH_PASSWORD == null) {
				throw new GradleException("Please specify the remote publication password with 'publish.password' in '~/.gradle/gradle.properties'.")
			}
		}
	}
}
